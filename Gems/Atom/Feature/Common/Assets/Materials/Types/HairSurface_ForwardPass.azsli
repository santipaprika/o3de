/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/PBR/ForwardPassSrg.azsli>

// Pass Output
#include <Atom/Features/PBR/ForwardSubsurfacePassOutput.azsli>

// Utility
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/AlphaUtils.azsli>

// Custom Surface & Lighting
#include <Atom/Features/PBR/Lighting/HairLighting.azsli>

// Decals
#include <Atom/Features/PBR/Decals.azsli>

// ---------- Vertex Shader ----------

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
 
    // Extended fields (only referenced in this azsl file)...
    float2 m_uv0_tiled : UV0;
    float2 m_uv1_unwrapped : UV1;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float3 m_tangent : TANGENT; 
    float3 m_bitangent : BITANGENT; 
    float3 m_worldPosition : UV0;
    float3 m_shadowCoords[ViewSrg::MaxCascadeCount] : UV4;

    // Extended fields (only referenced in this azsl file)...
    float2 m_uv[UvSetCount] : UV1;
};

#include <Atom/Features/Vertex/VertexHelper.azsli>

VSOutput HairVS(VSInput IN)
{
    VSOutput OUT;
 
    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
 
    // UV0 is for tiled UVs. 
    // Even though the "unwrapped" stream is considered the main stream from a material perspective, we
    // still define UV0 in order to match the default UV set order in most DCC tools for higher compatibility.
    OUT.m_uv[0] = IN.m_uv0_tiled;

    // UV1 is for unwrapped UVs. The main textures in the Hair material will almost always use this UV set.
    OUT.m_uv[1] = IN.m_uv1_unwrapped;

    VertexHelper(IN, OUT, worldPosition, false);

    return OUT;
}


// ---------- Pixel Shader ----------

PbrLightingOutput HairPS_Common(VSOutput IN)
{
    // [TODO] check front face
    const bool isFrontFace = true;

    // ------- Tangents & Bitangets -------
    float3 tangents[UvSetCount] = { IN.m_tangent.xyz, IN.m_tangent.xyz };
    float3 bitangents[UvSetCount] = { IN.m_bitangent.xyz, IN.m_bitangent.xyz };

    if (o_normal_useTexture)
    {
        for (int i = 0; i != UvSetCount; ++i)
        {
            EvaluateTangentFrame(
                IN.m_normal,
                IN.m_worldPosition, 
                isFrontFace,
                IN.m_uv[i],
                i,
                IN.m_tangent,
                IN.m_bitangent,
                tangents[i],
                bitangents[i]);
        }
    }
    
    SurfaceSettings surfaceSettings;
    Surface surface;
    surface.position = IN.m_worldPosition;
    surface.vertexNormal = normalize(IN.m_normal);

    // ------- Alpha & Clip -------
    // TODO: this often invokes a separate sample of the base color texture which is wasteful
    float alpha = GetAlphaAndClip(IN.m_uv);

    EvaluateHairSurface(IN.m_normal, IN.m_uv, tangents, bitangents, isFrontFace, surface, surfaceSettings);

    // ------- Lighting Data -------

    LightingData lightingData;

    // Light iterator
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);
    
    // Directional light shadow coordinates
    lightingData.shadowCoords = IN.m_shadowCoords;

    // Diffuse and Specular response (used in IBL calculations)
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0 - lightingData.specularResponse;

    // ------- Thin Object Light Transmission -------

    // Shrink (absolute) offset towards the normal opposite direction to ensure correct shadow map projection
    lightingData.shrinkFactor = surface.transmission.transmissionParams.x;

    // Angle offset for subsurface scattering through thin objects
    lightingData.transmissionNdLBias = surface.transmission.transmissionParams.y;

    // Attenuation applied to hide artifacts due to low-res shadow maps 
    lightingData.distanceAttenuation = surface.transmission.transmissionParams.z;

    // ------- Occlusion -------
    
    lightingData.diffuseAmbientOcclusion = GetOcclusionInput(MaterialSrg::m_diffuseOcclusionMap, MaterialSrg::m_sampler, IN.m_uv[MaterialSrg::m_diffuseOcclusionMapUvIndex], MaterialSrg::m_diffuseOcclusionFactor, o_diffuseOcclusion_useTexture);
    lightingData.specularOcclusion = GetOcclusionInput(MaterialSrg::m_specularOcclusionMap, MaterialSrg::m_sampler, IN.m_uv[MaterialSrg::m_specularOcclusionMapUvIndex], MaterialSrg::m_specularOcclusionFactor, o_specularOcclusion_useTexture);

    // ------- Lighting Calculation -------

    surface.clearCoat.factor = 0.0;
    surface.clearCoat.roughness = 0.0;
    surface.clearCoat.normal = float3(0.0, 0.0, 0.0);

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData);

    // Apply Image Based Lighting (IBL)
    ApplyIBL(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting(surface.transmission.tint);

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData);
        
    // ------- Preparing output -------

    // Pack factor and quality, drawback: because of precision limit of float16 cannot represent exact 1, maximum representable value is 0.9961
    uint factorAndQuality = dot(round(float2(saturate(surface.subsurfaceScatteringFactor), MaterialSrg::m_subsurfaceScatteringQuality) * 255), float2(256, 1));
    lightingOutput.m_diffuseColor.w = factorAndQuality * (o_enableSubsurfaceScattering ? 1.0 : -1.0);
    lightingOutput.m_scatterDistance = MaterialSrg::m_scatterDistance;

    // ------- Opacity -------

    if (o_opacity_mode == OpacityMode::Blended || o_opacity_mode == OpacityMode::TintedTransparent)
    {
        // Increase opacity at grazing angles for surfaces with a low m_opacityAffectsSpecularFactor.
        // For m_opacityAffectsSpecularFactor values close to 0, that indicates a transparent surface
        // like glass, so it becomes less transparent at grazing angles. For m_opacityAffectsSpecularFactor
        // values close to 1.0, that indicates the absence of a surface entirely, so this effect should
        // not apply.
        float fresnelAlpha = FresnelSchlickWithRoughness(lightingData.NdotV, alpha, surface.roughnessLinear).x;
        alpha = lerp(fresnelAlpha, alpha, surfaceSettings.opacityAffectsSpecularFactor);
    }

    if (o_opacity_mode == OpacityMode::Blended)
    {
        // [GFX_TODO ATOM-13187] PbrLighting shouldn't be writing directly to render targets. It's confusing when
        // specular is being added to diffuse just because we're calling render target 0 "diffuse".

        // For blended mode, we do (dest * alpha) + (source * 1.0). This allows the specular
        // to be added on top of the diffuse, but then the diffuse must be pre-multiplied.
        // It's done this way because surface transparency doesn't really change specular response (eg, glass).

        lightingOutput.m_diffuseColor.rgb *= lightingOutput.m_diffuseColor.w; // pre-multiply diffuse
        
        // Add specular. m_opacityAffectsSpecularFactor controls how much the alpha masks out specular contribution.
        float3 specular = lightingOutput.m_specularColor.rgb;
        specular = lerp(specular, specular * lightingOutput.m_diffuseColor.w, surfaceSettings.opacityAffectsSpecularFactor);
        lightingOutput.m_diffuseColor.rgb += specular;

        lightingOutput.m_diffuseColor.w = alpha;
    }
    else if (o_opacity_mode == OpacityMode::TintedTransparent)
    {
        // See OpacityMode::Blended above for the basic method. TintedTransparent adds onto the above concept by supporting
        // colored alpha. This is currently a very basic calculation that uses the baseColor as a multiplier with strength
        // determined by the alpha. We'll modify this later to be more physically accurate and allow surface depth,
        // absorption, and interior color to be specified.
        //
        // The technique uses dual source blending to allow two separate sources to be part of the blending equation
        // even though ultimately only a single render target is being written to. m_diffuseColor is render target 0 and
        // m_specularColor render target 1, and the blend mode is (dest * source1color) + (source * 1.0).
        //
        // This means that m_specularColor.rgb (source 1) is multiplied against the destination, then
        // m_diffuseColor.rgb (source) is added to that, and the final result is stored in render target 0.

        lightingOutput.m_diffuseColor.rgb *= lightingOutput.m_diffuseColor.w; // pre-multiply diffuse

        // Add specular. m_opacityAffectsSpecularFactor controls how much the alpha masks out specular contribution.
        float3 specular = lightingOutput.m_specularColor.rgb;
        specular = lerp(specular, specular * lightingOutput.m_diffuseColor.w, surfaceSettings.opacityAffectsSpecularFactor);
        lightingOutput.m_diffuseColor.rgb += specular;

        lightingOutput.m_specularColor.rgb = surface.albedo * (1.0 - alpha); 
    }
    else
    {
        lightingOutput.m_diffuseColor.w = -1; // Disable subsurface scattering
    }

    return lightingOutput;
}

[earlydepthstencil]
ForwardPassOutput HairPS(VSOutput IN)
{
    ForwardPassOutput OUT;

    PbrLightingOutput lightingOutput = HairPS_Common(IN);

    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
    OUT.m_scatterDistance = lightingOutput.m_scatterDistance;

    return OUT;
}
